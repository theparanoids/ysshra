// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/theparanoids/ysshra/agent/yubiagent (interfaces: YubiAgent)

// Package mock is a generated GoMock package.
package mock

import (
	x509 "crypto/x509"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	ssh "golang.org/x/crypto/ssh"
	agent "golang.org/x/crypto/ssh/agent"
)

// MockYubiAgent is a mock of YubiAgent interface.
type MockYubiAgent struct {
	ctrl     *gomock.Controller
	recorder *MockYubiAgentMockRecorder
}

// MockYubiAgentMockRecorder is the mock recorder for MockYubiAgent.
type MockYubiAgentMockRecorder struct {
	mock *MockYubiAgent
}

// NewMockYubiAgent creates a new mock instance.
func NewMockYubiAgent(ctrl *gomock.Controller) *MockYubiAgent {
	mock := &MockYubiAgent{ctrl: ctrl}
	mock.recorder = &MockYubiAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYubiAgent) EXPECT() *MockYubiAgentMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockYubiAgent) Add(arg0 agent.AddedKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockYubiAgentMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockYubiAgent)(nil).Add), arg0)
}

// AddHardCert mocks base method.
func (m *MockYubiAgent) AddHardCert(arg0 ssh.PublicKey, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHardCert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHardCert indicates an expected call of AddHardCert.
func (mr *MockYubiAgentMockRecorder) AddHardCert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHardCert", reflect.TypeOf((*MockYubiAgent)(nil).AddHardCert), arg0, arg1)
}

// AddSmartcardKey mocks base method.
func (m *MockYubiAgent) AddSmartcardKey(arg0 string, arg1 []byte, arg2 time.Duration, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSmartcardKey", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSmartcardKey indicates an expected call of AddSmartcardKey.
func (mr *MockYubiAgentMockRecorder) AddSmartcardKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSmartcardKey", reflect.TypeOf((*MockYubiAgent)(nil).AddSmartcardKey), arg0, arg1, arg2, arg3)
}

// AttestSlot mocks base method.
func (m *MockYubiAgent) AttestSlot(arg0 string) (*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttestSlot", arg0)
	ret0, _ := ret[0].(*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttestSlot indicates an expected call of AttestSlot.
func (mr *MockYubiAgentMockRecorder) AttestSlot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttestSlot", reflect.TypeOf((*MockYubiAgent)(nil).AttestSlot), arg0)
}

// Close mocks base method.
func (m *MockYubiAgent) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockYubiAgentMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockYubiAgent)(nil).Close))
}

// Extension mocks base method.
func (m *MockYubiAgent) Extension(arg0 string, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extension", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extension indicates an expected call of Extension.
func (mr *MockYubiAgentMockRecorder) Extension(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extension", reflect.TypeOf((*MockYubiAgent)(nil).Extension), arg0, arg1)
}

// Forward mocks base method.
func (m *MockYubiAgent) Forward(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Forward", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Forward indicates an expected call of Forward.
func (mr *MockYubiAgentMockRecorder) Forward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forward", reflect.TypeOf((*MockYubiAgent)(nil).Forward), arg0)
}

// List mocks base method.
func (m *MockYubiAgent) List() ([]*agent.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*agent.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockYubiAgentMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockYubiAgent)(nil).List))
}

// ListSlots mocks base method.
func (m *MockYubiAgent) ListSlots() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlots")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSlots indicates an expected call of ListSlots.
func (mr *MockYubiAgentMockRecorder) ListSlots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlots", reflect.TypeOf((*MockYubiAgent)(nil).ListSlots))
}

// Lock mocks base method.
func (m *MockYubiAgent) Lock(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockYubiAgentMockRecorder) Lock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockYubiAgent)(nil).Lock), arg0)
}

// ReadSlot mocks base method.
func (m *MockYubiAgent) ReadSlot(arg0 string) (*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSlot", arg0)
	ret0, _ := ret[0].(*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSlot indicates an expected call of ReadSlot.
func (mr *MockYubiAgentMockRecorder) ReadSlot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSlot", reflect.TypeOf((*MockYubiAgent)(nil).ReadSlot), arg0)
}

// Remove mocks base method.
func (m *MockYubiAgent) Remove(arg0 ssh.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockYubiAgentMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockYubiAgent)(nil).Remove), arg0)
}

// RemoveAll mocks base method.
func (m *MockYubiAgent) RemoveAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockYubiAgentMockRecorder) RemoveAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockYubiAgent)(nil).RemoveAll))
}

// RemoveSmartcardKey mocks base method.
func (m *MockYubiAgent) RemoveSmartcardKey(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSmartcardKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSmartcardKey indicates an expected call of RemoveSmartcardKey.
func (mr *MockYubiAgentMockRecorder) RemoveSmartcardKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSmartcardKey", reflect.TypeOf((*MockYubiAgent)(nil).RemoveSmartcardKey), arg0, arg1)
}

// Sign mocks base method.
func (m *MockYubiAgent) Sign(arg0 ssh.PublicKey, arg1 []byte) (*ssh.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0, arg1)
	ret0, _ := ret[0].(*ssh.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockYubiAgentMockRecorder) Sign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockYubiAgent)(nil).Sign), arg0, arg1)
}

// SignWithFlags mocks base method.
func (m *MockYubiAgent) SignWithFlags(arg0 ssh.PublicKey, arg1 []byte, arg2 agent.SignatureFlags) (*ssh.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignWithFlags", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ssh.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignWithFlags indicates an expected call of SignWithFlags.
func (mr *MockYubiAgentMockRecorder) SignWithFlags(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignWithFlags", reflect.TypeOf((*MockYubiAgent)(nil).SignWithFlags), arg0, arg1, arg2)
}

// Signers mocks base method.
func (m *MockYubiAgent) Signers() ([]ssh.Signer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signers")
	ret0, _ := ret[0].([]ssh.Signer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signers indicates an expected call of Signers.
func (mr *MockYubiAgentMockRecorder) Signers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signers", reflect.TypeOf((*MockYubiAgent)(nil).Signers))
}

// Unlock mocks base method.
func (m *MockYubiAgent) Unlock(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock.
func (mr *MockYubiAgentMockRecorder) Unlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockYubiAgent)(nil).Unlock), arg0)
}

// Wait mocks base method.
func (m *MockYubiAgent) Wait(arg0 byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockYubiAgentMockRecorder) Wait(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockYubiAgent)(nil).Wait), arg0)
}
